Index: Optimized_dynamic_tether_sim.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import numpy as np\r\nimport matplotlib.pyplot as plt\r\nimport matplotlib.animation as animation\r\nimport Wind_loading_generations as Wind_l\r\n\r\nnodes = 50\r\nh_balloon = 20000  # m\r\nh_ground = 0  # m\r\nL = 80000  # N\r\nD = 1000  # N\r\ndensity = 1000  # kg/m^3\r\nr = 0.005  # m\r\nwind = 20  # m/s\r\nCd = 1.2\r\nrho = 0.5  # kg/m^3\r\nE = 100e9  # Pa\r\ng = 9.8  # m/s\r\nC = 4  # Ns/m\r\nwind_profile_select = 4\r\n\r\n# Initiate nodes\r\ny = np.linspace(h_ground, h_balloon, nodes)  # altitude\r\nx = np.zeros(nodes)  # x pos\r\nFx = np.zeros(nodes)  # sum of x forces on node\r\nFy = np.zeros(nodes)  # sum of y forces on node\r\nvx = np.zeros(nodes)  # node velocity\r\nvy = np.zeros(nodes)\r\nax = np.zeros(nodes)  # node acceleration\r\nay = np.zeros(nodes)\r\nxframes = np.zeros((1, nodes))\r\nyframes = np.zeros((1, nodes))\r\n\r\n# Initiate segments\r\nsegments = nodes - 1\r\nL0 = (h_balloon - h_ground) / segments  # length of a segment\r\ncrossA = r ** 2 * np.pi  # m^2\r\nS_front = 2 * r * L0\r\ntheta = np.arctan(np.zeros(segments))\r\nT = np.zeros(segments)\r\n\r\n# Initiate node mass and weight (first and last node have half the mass of the rest)\r\nm = L0 * crossA * density * np.ones(nodes)\r\nm[0] = m[0] * 0.5\r\nm[-1] = m[-1] * 0.5\r\nW = m * g\r\n\r\n# print('W = ', W)\r\n\r\nt = 0\r\ndt = 0.001\r\nt_end = 500\r\n\r\n# Create the figure and axes to animate\r\nfig, axs = plt.subplots(1)\r\n\r\n\r\n# init_func() is called at the beginning of the animation\r\ndef init_func():\r\n    axs.clear()\r\n\r\n\r\n# update_plot() is called between frames\r\ndef update_plot(i):\r\n    axs.clear()\r\n    axs.plot(xframes[i, :], yframes[i, :], color='k')\r\n\r\n\r\ncounter = 0\r\nwhile t < t_end:  # and np.any(abs(ax) > 0.1):\r\n\r\n    if np.all(abs(ax) < 0.01) and np.all(abs(vx) < 0.1) and t > 30:\r\n        print(\"Break because of low acceleration and speed\")\r\n        break\r\n\r\n    t += dt\r\n    counter += 1\r\n    if counter % 10000 == 0:\r\n        print(f\"Has run {counter} loops\")\r\n        # print(y)\r\n        xframes = np.append(xframes, [x], axis=0)\r\n        yframes = np.append(yframes, [y], axis=0)\r\n    # print(t)\r\n\r\n    # Calculate tension forces in all segments\r\n    for seg in range(segments):\r\n        if (y[seg + 1] - y[seg]) == 0:\r\n            print(\"please god help\")\r\n        # if (x[seg + 1] - x[seg]) == 0:\r\n        #     print(\"please god help\")\r\n        T[seg] = crossA * E / L0 * (np.sqrt((y[seg + 1] - y[seg]) ** 2 + (x[seg + 1] - x[seg]) ** 2) - L0)\r\n        theta[seg] = np.arctan2((x[seg + 1] - x[seg]), (y[seg + 1] - y[seg]))\r\n    Tx = T * np.sin(theta)\r\n    Ty = T * np.cos(theta)\r\n    # print('Tx,Ty = ',Tx,Ty)\r\n\r\n    # Calculate wind force\r\n    wind_speed = Wind_l.wind_profile(y, wind_profile_select, plot=False)\r\n    Fwind = Wind_l.calc_drag_on_wire(x, y, wind_speed, L0, r, Cd)\r\n\r\n    # Calculate resisting forces\r\n    Fresx = C * vx\r\n    Fresy = C * vy\r\n\r\n    # Calculate total forces on all nodes\r\n    Fx[0] = Tx[0] + Fwind[0] / 2 - Fresx[0]\r\n    Fy[0] = Ty[0] - W[0] - Fresy[0]\r\n    for node in range(1, nodes - 1):\r\n        Fx[node] = Tx[node] - Tx[node - 1] + Fwind[node] - Fresx[node]\r\n        Fy[node] = Ty[node] - Ty[node - 1] - W[node] - Fresy[node]\r\n    Fx[-1] = D + Fwind[-1] / 2 - Tx[-1] - Fresx[-1]\r\n    Fy[-1] = L - Ty[-1] - W[-1] - Fresy[-1]\r\n\r\n    ax[1:] = Fx[1:] / m[1:] * min(t, 1)\r\n    ay[1:] = Fy[1:] / m[1:] * min(t, 1)\r\n    Rx = -Fx\r\n    Ry = -Fy\r\n\r\n    vx = vx + ax * dt\r\n    vy = vy + ay * dt\r\n\r\n    x = x + vx * dt\r\n    y = y + vy * dt\r\n\r\nanim = animation.FuncAnimation(fig, update_plot, frames=xframes.shape[0], init_func=init_func)\r\nplt.show()\r\n\r\n# print(xframes, yframes)\r\nprint('Fx,Fy = ', Fx, Fy)\r\n# print(T)\r\n# print(T/(crossA * E / L0) + L0)\r\nprint(T / crossA)\r\nprint('ax,ay = ', ax, ay)\r\nprint('vx,vy = ', vx, vy)\r\nprint('x,y = ', x, y)\r\n# print(theta)\r\n\r\nplt.plot(x, y)\r\nplt.show()
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Optimized_dynamic_tether_sim.py b/Optimized_dynamic_tether_sim.py
--- a/Optimized_dynamic_tether_sim.py	(revision cd1f66b870dd4b0b1451d6275210be5397bd7f27)
+++ b/Optimized_dynamic_tether_sim.py	(date 1673427151690)
@@ -125,13 +125,13 @@
 plt.show()
 
 # print(xframes, yframes)
-print('Fx,Fy = ', Fx, Fy)
+# print('Fx,Fy = ', Fx, Fy)
 # print(T)
 # print(T/(crossA * E / L0) + L0)
-print(T / crossA)
-print('ax,ay = ', ax, ay)
-print('vx,vy = ', vx, vy)
-print('x,y = ', x, y)
+# print(T / crossA)
+# print('ax,ay = ', ax, ay)
+# print('vx,vy = ', vx, vy)
+# print('x,y = ', x, y)
 # print(theta)
 
 plt.plot(x, y)
Index: .idea/DSE_Group3_Q2_2022.iml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<module type=\"PYTHON_MODULE\" version=\"4\">\r\n  <component name=\"NewModuleRootManager\">\r\n    <content url=\"file://$MODULE_DIR$\">\r\n      <excludeFolder url=\"file://$MODULE_DIR$/venv\" />\r\n    </content>\r\n    <orderEntry type=\"jdk\" jdkName=\"Python 3.8 Global\" jdkType=\"Python SDK\" />\r\n    <orderEntry type=\"sourceFolder\" forTests=\"false\" />\r\n  </component>\r\n</module>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/DSE_Group3_Q2_2022.iml b/.idea/DSE_Group3_Q2_2022.iml
--- a/.idea/DSE_Group3_Q2_2022.iml	(revision cd1f66b870dd4b0b1451d6275210be5397bd7f27)
+++ b/.idea/DSE_Group3_Q2_2022.iml	(date 1673426531611)
@@ -4,7 +4,7 @@
     <content url="file://$MODULE_DIR$">
       <excludeFolder url="file://$MODULE_DIR$/venv" />
     </content>
-    <orderEntry type="jdk" jdkName="Python 3.8 Global" jdkType="Python SDK" />
+    <orderEntry type="jdk" jdkName="Python 3.1" jdkType="Python SDK" />
     <orderEntry type="sourceFolder" forTests="false" />
   </component>
 </module>
\ No newline at end of file
Index: .idea/misc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"ProjectRootManager\" version=\"2\" project-jdk-name=\"Python 3.8 Global\" project-jdk-type=\"Python SDK\" />\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/misc.xml b/.idea/misc.xml
--- a/.idea/misc.xml	(revision cd1f66b870dd4b0b1451d6275210be5397bd7f27)
+++ b/.idea/misc.xml	(date 1673426531649)
@@ -1,4 +1,4 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <project version="4">
-  <component name="ProjectRootManager" version="2" project-jdk-name="Python 3.8 Global" project-jdk-type="Python SDK" />
+  <component name="ProjectRootManager" version="2" project-jdk-name="Python 3.1" project-jdk-type="Python SDK" />
 </project>
\ No newline at end of file
